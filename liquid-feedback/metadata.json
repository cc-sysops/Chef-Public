{
  "version": "1.1.0",
  "attributes": {
  },
  "maintainer_email": "chef-cookbooks@computerlyrik.de",
  "name": "liquid-feedback",
  "license": "Apache 2.0",
  "replacing": {
  },
  "suggestions": {
  },
  "recommendations": {
  },
  "dependencies": {
    "postgresql": ">= 0.0.0",
    "mercurial": ">= 0.0.0",
    "openssl": ">= 0.0.0",
    "database": ">= 0.0.0"
  },
  "recipes": {
  },
  "groupings": {
  },
  "conflicting": {
  },
  "long_description": "# Description\nbeta\n\nSets up a liquid democracy tool: LiquidFeedback  (http://liquidfeedback.org)\n\nBased on Lua and Postgresql\n\n# Requirements\nCookbooks\n```\npostgresql and database\nmercurial\nopenssl\n```\n\n# Resources\n\n**Instance related attributes**\n```ruby\nliquid_feedback \"OurOrganization\" do\n    email_from \"lqfb@example.com\"\n    area \"The Internet\"\n    action :create\n    member_ttl '1 year'\n\n    # software related attributes\n    core_version 'v2.1.0'\n    webmcp_version 'v2.1.0'\n    frontend_version 'v2.1.2'\nend\n```\n\n# Usage\n\n## Via Resource (multi-instance)\nSet up one or multiple liquid_feedback resource in your recipe and run it.\nYour admin invitekey will be written to a template\n\n### miminal example script\n```ruby\n::Chef::Recipe.send(:include, Opscode::OpenSSL::Password)\n\nnode.set_unless['lf']['db_password'] = secure_password\nnode.set['lf']['db_user'] = \"liquid_feedback\"\n\nliquid_feedback \"org1\" do\n\n    email \"org1.example.com\"\n    locale \"de_DE.UTF-8\"\n\n    db_user node['lf']['db_user']\n    db_password node['lf']['db_password']\n\n    action [:create, :start]\nend\n\nliquid_feedback \"org2\" do\n\n    email \"org2@example.com\"\n    locale \"en_US.UTF-8\"\n\n    db_user node['lf']['db_user']\n    db_password node['lf']['db_password']\n\n    action [:create, :start]\nend\n```\n\n\n## Via Recipe (single-instance)\n\nSet up node attributes\nInclude recipe.\n\nYour admin invitekey will be stored as node attribute\n```ruby \nnode['lf']['admin_invitecode']\n```\n\n# Notes\n\nIf you use chef-solo, you must set lf db password and postgresql password in\nnode json directly:\n\n```json\n    \"lf\": {\n        \"db\": {\n            \"password\": \"passwordForLQInstanceUser\"\n        }\n    },\n    \"postgresql\": {\n        \"password\": {\n            \"postgres\": \"passwordForConncetingToPG\"\n        }\n    }\n```\n\nKNOWN BUGS with using resources:\n- Lighttpd currently supports only single-instance (web path)\n- Postgresql supports only one db_user and db_password (pg_hba needs to be setup for all users, circumvent with setting db_user and db_password same on all your resources)\n\n# Ideas/Todo\n- Setup Postfix or exim (or email)\n- Send event notifications\n\n- Set up Unix users for postges access\n- Set up lighttp to run lua scripts as unix users (and find out which access rights they need)\n\n# Contact\nsee metadata.rb\n",
  "providing": {
  },
  "maintainer": "computerlyrik",
  "platforms": {
  },
  "description": "Set up liquid feedback system"
}