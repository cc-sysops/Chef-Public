{
  "name": "cloudformation",
  "description": "Tools for integrating Chef with CloudFormation",
  "long_description": "# Description\n\nTools for integrating Chef with CloudFormation.\n\nThis cookbook contains Ohai plugin that reads cloudformation metadata, LWRP and handler for coordinating with\nCloudFormation WaitCondition.\n\n# Usage\n\nTo install the handler and Ohai plugin use the cloudformation::default recipe.\n\n## WaitCondition\nThe easiest way to signal wait condition on chef run completion is the cloudformation::signal recipe.\nThis recipe will activate the handler at the end of the Chef run. You will need to pass the Handler URL using CloudFormation resource metadata:\n\n    \"SomeAutoscalingGroup\": {\n      \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n      \"Properties\": {\n        ...\n      },\n      \"Metadata\": {\n        \"waitHandlers\": {\n          \"chef_run_finished\": {\"Ref\": \"SomeNodeInstalledWaitHandle\"}\n        }\n      }\n    },\n \nThe signal recipe reads the `node['cloudformation']['metadata']['waitHandlers']['chef_run_finished']` attribute and uses it to configure the signal handler.\n\nIf you want to singal a wait condition in the middle of the chef run, e.g. after some app was deployed, you can use the `cloudformation_signal` LWRP:\n\n    cloudformation_signal \"app deployed\" do\n        url node['cloudformation']['metadata']['waitHandlers']['app_deployed']\n        data \"app deployed succefully\"\n    end\n\nFor other attributes of the LWRP have a look at the LWRP resource file.\n",
  "maintainer": "Fewbytes",
  "maintainer_email": "avishai@fewbytes.com",
  "license": "Apache V2",
  "platforms": {
  },
  "dependencies": {
    "chef_handler": ">= 0.0.0",
    "ohai": ">= 0.0.0",
    "xml": "~> 1.1.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
  },
  "version": "0.0.1"
}