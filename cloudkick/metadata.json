{
  "name": "cloudkick",
  "description": "Installs/Configures the Cloudkick Agent",
  "long_description": "Description\n===========\n\nInstalls and configures the Cloudkick Agent, and integrates it with Chef.\n\nRequirements\n============\n\nRequires Chef 0.10.10+\n\n* `chef_gem` in default recipe\n* `default_action` in check and monitor LWRPs\n\nRequires Ohai 0.6.12+ for `node['platform_family']`.\n\nPlatform\n--------\n\nPlatform families Debian, RHEL and Fedora are supported in the general\nsense, though not all may have appropriate Cloudkick packages\navailable upstream.\n\nCookbooks\n---------\n\n* apt\n* yum\n\nThe `apt_repository` and `yum_repository` LWRPs are used from these\ncookbooks to create the proper repository entries so the Cloudkick\nagent can be downloaded and installed.\n\nAttributes\n==========\n\nThe `/etc/cloudkick.conf` is built using these attribute values:\n\n* `node['cloudkick']['oauth_key']` - the OAuth key used for\n  authentication with the Cloudkick API.\n* `node['cloudkick']['oauth_secret']` - the OAuth secret used for\n  authentication with the Cloudkick API.\n* `node['cloudkick']['node_name']` - host name for the Cloudkick dashboard,\n  taken from ohai `node[:hostname]` by default.\n* `node['cloudkick']['additional_tags']` - additional Cloudkick tags,\n  added to the tags taken automatically from Role names.\n* `node['cloudkick']['local_plugins_path']` - path to a directory containing custom agent plugins,\n  defaults to `/usr/lib/cloudkick-agent/plugins`, the same as Cloudkick.\n* `node['cloudkick']['data']` - data for the Cloudkick API about the\n  node.\n\nResources & Providers\n=====================\n\nThis cookbook contains two Resource Providers:\n\n* `cloudkick_check` - For creating & manipulating Cloudkick Checks.\n* `cloudkick_monitor` - For creating & manipulating Cloudkick Monitors.\n\n## Example Usage:\n\n* Create a Cloudkick Monitor for all of our appservers:\n\n    cloudkick_monitor \"appserver monitor\" do\n      oauth_key 'xxx'\n      oauth_secret 'yyy'\n      query 'tag:appserver'\n      action :create\n    end\n\n* Create a Cloudkick Check for the root partition on our appservers:\n\n    cloudkick_check \"root check\" do\n      oauth_key 'xxx'\n      oauth_secret 'yyy'\n      code 51 # 'DISK'\n      details({:path => '/', :fs_critical => 99, :fs_warn => 95})\n      monitor_id 'q1234'\n      action :create\n    end\n\nUsage\n=====\n\nIn order for the agent to function, you'll need to have defined your Cloudkick API key and secret.  We recommend you do this in a Role, which should also take care of applying the cloudkick::default recipe.\n\nAssuming you name the role 'cloudkick', here is the required json:\n\n    {\n      \"name\": \"cloudkick\",\n      \"chef_type\": \"role\",\n      \"json_class\": \"Chef::Role\",\n      \"default_attributes\": {\n        \"cloudkick\": {\n          \"additional_tags\": [ \"agent\" ],      # Optional.\n          \"node_name\": \"YOUR UNIQUE HOSTNAME\"  # Optional.\n        }\n      },\n      \"description\": \"Configures Cloudkick\",\n      \"run_list\": [\n        \"recipe[cloudkick]\"\n      ],\n      \"override_attributes\": {\n        \"cloudkick\": {\n          \"oauth_key\": \"YOUR KEY HERE\"\n          \"oauth_secret\": \"YOUR SECRET HERE\"\n        }\n      }\n    }\n\nIf you want Cloudkick installed everywhere, we recommend you just add the cloudkick attributes to a base role.\n\nAll of the data about the node from Cloudkick is available in node['cloudkick'] - for example:\n\n    \"cloudkick\": {\n      \"oauth_key\": \"YOUR KEY HERE\",\n      \"oauth_secret\": \"YOUR SECRET HERE\",\n      \"data\": {\n        \"name\": \"slice204393\",\n        \"status\": \"running\",\n        \"ipaddress\": \"173.203.83.199\",\n        \"provider_id\": \"padc2665\",\n        \"tags\": [\n          \"agent\",\n          \"cloudkick\"\n        ],\n        \"agent_state\": \"connected\",\n        \"id\": \"n87cfc79c5\",\n        \"provider_name\": \"Rackspace\",\n        \"color\": \"#fffffff\"\n      }\n    }\n\nOf particular interest is the inclusion of the Cloudkick tags.  This will allow you to search Chef via tags placed on nodes within Cloudkick:\n\n    $ knife search node 'cloudkick_data_tags:agent' -a fqdn\n    {\n      \"rows\": [\n        {\n          \"fqdn\": \"slice204393\",\n          \"id\": \"slice204393\"\n        }\n      ],\n      \"start\": 0,\n      \"total\": 1\n    }\n\nWe automatically add a tag for each Role applied to your node.  For example, if your node had a run list of:\n\n    \"run_list\": [ \"role[webserver]\", \"role[database_master]\" ]\n\nThe node will automatically have the 'webserver' and 'database_master' tags within Cloudkick.\n\nLicense and Author\n==================\n\nAuthor:: Adam Jacob (<adam@opscode.com>)\nAuthor:: Seth Chisamore (<schisamo@opscode.com>)\nCopyright:: 2010-2011, Opscode, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "Opscode, Inc.",
  "maintainer_email": "cookbooks@opscode.com",
  "license": "Apache 2.0",
  "platforms": {
  },
  "dependencies": {
    "apt": ">= 0.0.0",
    "yum": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "cloudkick::default": "Installs and configures Cloudkick"
  },
  "version": "1.3.0"
}