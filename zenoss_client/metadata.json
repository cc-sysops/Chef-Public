{
  "name": "zenoss_client",
  "description": "Configures a node to be a Zenoss client/monitored node",
  "long_description": "# Zenoss Client Cookbook\n[![Build Status](https://travis-ci.org/ZCA/zenoss_client-chef-cookbook.png?branch=master)](https://travis-ci.org/ZCA/zenoss_client-chef-cookbook)\n\nThe zenoss_client cookbook is intended to replace the functionality that used \nto reside in the client recipe of the [Zenoss cookbook](http://community.opscode.com/cookbooks/zenoss). \nIn anticipation of  updates to that cookbook to support Core 4, the client \nlogic is being split out to its own cookbook to help ease testing as well as \nreduce dependencies. The updates to the Zenoss cookbook to support core 4 will \nintroduce a large number of dependencies, which most clients simply won't need.\n\nAdditionally by splitting out the client components, we are laying the\ngroundwork to later add some support for nodes to self-register using the \nJSON API.\n\nAs of 1.1.0 a new LWRP was introduced which will allow nodes to register\nthemselves with a Zenoss server using the JSON API. Please see the details\non the LWRP below\n\n## Requirements\nThis cookbook will need access to rubygems.org, or your node must be\npre-configured with a gem source that mirrors rubygems.org\n\n## Usage\nInclude the default recipe in node's run_list and it will be configured.\n\nIf you are an environment where creating a local user for Zenoss to use\nis not desirable, be sure to set the value of \n`node['zenoss']['client']['create_local_user']` to false. Doing so will\nprevent a local user from being created\n\n## Attributes\nThe attributes are documented in the default attributes file \n(`attributes/default.rb`). Please refer to that file for details about\nthe available attributes\n\n## Recipes\nCurrently the only recipe that exists is the default recipe\n\n## LWRP: zenoss_client\nThe Zenoss Client LWRP can be used to to register nodes on a Zenoss server.\nThe primary use case is for nodes to register themselves as part of the\nbootstrap process, however the LWRP is constructed in such a way that you could\nregister other nodes as well (i.e. using nodes discovered via search on a \ncentral node somewhere).\n\n### Usage\nThe LWRP makes use of the [zenoss_client gem](http://rubygems.org/gems/zenoss_client)\nto communicate with the JSON API. The default recipe in this cookbook will \nhandle installing the gem. It is important that you \n`include_recipe \"zenoss_client\"` before attempting to call the LWRP.\n\nAlternatively you if don't want to run the default recipe for some reason you\nwill need to handle the `chef_gem \"zenoss_client\"` installation yourself\nsomewhere in your run_list prior to calling the LWRP.\n\n#### Actions\n* `:add` - Add/register a node with a Zenoss Server. **Default**\r\n* `delete` - Delete a node from a Zenoss Server\n\n#### Attributes\n* `device_title` - The display name or title as displayed in the Zenoss UI\r\n  * Type: *String*\r\n  * Default: Name Attribute of the Resource\n* `api_host` - The host/ip of your Zenoss API. Generally this will be your Zenoss\r\n  server name, however if you're running Zenoss behind a VIP or something along\n  those lines, you could put that here  \n  * Type: *String*\n  * Default: `node['zenoss']['client']['server'] `\r\n* `api_port` - The HTTP port of your Zenoss API.\n  * Type: *Integer*\n  * Default: `node['zenoss']['client']['server_port']`\r\n* `api_user` **Required** - The username to use for API authentication\n  * Type: *String*\n  * Default: *nil*\r\n* `api_password` **Required** - The password to use for API authentication\n  * Type: *String*\n  * Default: *nil*\r\n* `api_protocol` - The protocol/scheme to use for API communications. Must be\r\n  either *http* or *https*\n  * Type: *String*\n  * Default: http\r\n* `wait_for` - The amount of time to wait for confirmation that the device has \r\n  been added. When you add a device via the API, a background job is queued\n  and Zenoss will try and collect some basic information about the node.\n  Generally, this is a fairly fast operation, but depending on your network\n  this might take longer. The default behavior of the LWRP will is to \n  **fire and forget**. That means as soon as the JSON API responds that the \n  background job has been queued, the run will continue. Setting a value for\n  this will result in the run **blocking** until the node is registered or\n  the amount of elapsed time exceeds this value\n  * Type: *Integer*\n  * Default: 0\r\n* `ip` - The IP that is to be set as the manage IP of the device\n  * Type: *String*\n  * Default: `node['ipaddress']`\r\n* `collector` - The collector aka 'remote collector' that the device should be\r\n  assigned to.\n  * Type: *String*\n  * Default: \"localhost\"\r\n* `device_class` - The Device Class that the node should get put in\n  * Type: *String*\n  * Default: \"/Devices/Server\"\r\n* `comments` - Comments to put on the Device\n  * Type: *default*\n  * Default: \"\"\r\n\n### Examples\nThe [testing recipe](https://github.com/ZCA/zenoss_client-chef-cookbook/tree/master/test/cookbooks/zenoss_client_test/recipes/client_lwrp.rb)\nused to test this cookbook is a good place to look for example usages, but here\nare a couple of examples.\n\nExample 1: Register **this** node\n\n    # Use the 'fire and forget' method, and don't wait for confirmation\n    zenoss_client node.name do\n      action :add\n      api_user \"MyZenossAPIUser\"\n      api_password \"MyZenossAPIPassword\"\n    end\n\nExample 2: Register some other node\n\n    # Register a new node name 'TestDevice1'.\n    # Wait **up to** 120 seconds for the node to be registered\r\n    # Register the device with a management IP of 1.1.1.1\n    zenoss_client \"TestDevice1\" do\n      action :add\n      api_user \"MyZenossAPIPassword\"\n      api_password node['zenoss']['client']['test']['api_password']\n      wait_for 120\n      ip  \"1.1.1.1\"\n    end\n\nExample 3: Delete **this** node\n\n    # Delete *this* node\n    zenoss_client node.name do\n      action :delete\n      api_user \"MyZenossAPIUser\"\n      api_password \"MyZenossAPIPassword\"\n    end\n\n## Authors\nAuthor:: David Petzel (davidpetzel@gmail.com)\n\n## Testing\nThis cookbook is setup to be tested using \n[test-kitchen](https://github.com/opscode/test-kitchen) and supporting tools.\nYou should ensure you have the following set of utilities on your machine:\n\n* [Vagrant](http://www.vagrantup.com/)\r\n* [Test Kitchen](https://github.com/opscode/test-kitchen)\r\n* [Berkshelf](http://berkshelf.com/)\r\n* [vagrant-berkshelf](https://github.com/riotgames/vagrant-berkshelf)\r\n* [vagrant-omnibus](https://github.com/schisamo/vagrant-omnibus)\r\n\r\nYou should refer to the Test Kitchen documentation for more in depth information\r\naround running tests, however here is a quick rundown.\r\n\r\nYou can see the available test suites by running via the `kitchen list` command.\nThis will show you each combination that is available for testing. \n\nYou can run all tests by running `kitchen test`. Or if you only want to test\nCentos 6.4, you could run `kitchen test zenoss-client-centos-64`. You can also\nuse regular expression in place of the suite name to run a subset of all suites\n\nCurrently the platforms and suite(s) are configured to provide test coverage\nof both Chef 10 and Chef 11\n\n\n",
  "maintainer": "David Petzel",
  "maintainer_email": "davidpetzel@gmail.com",
  "license": "Apache 2.0",
  "platforms": {
    "ubuntu": ">= 0.0.0",
    "rhel": ">= 0.0.0",
    "windows": ">= 0.0.0"
  },
  "dependencies": {
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
  },
  "version": "1.1.0"
}